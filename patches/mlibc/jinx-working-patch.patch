diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index 905fbb9..0f27b34 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -239,6 +239,11 @@ elif host_machine.system() == 'vinix'
 	rtld_include_dirs += include_directories('sysdeps/vinix/include')
 	libc_include_dirs += include_directories('sysdeps/vinix/include')
 	subdir('sysdeps/vinix')
+elif host_machine.system() == 'nyaux'
+	disable_linux_option = true
+	rtld_include_dirs += include_directories('sysdeps/nyaux/include')
+	libc_include_dirs += include_directories('sysdeps/nyaux/include')
+	subdir('sysdeps/nyaux')
 elif host_machine.system() == 'lyre'
 	disable_linux_option = true
 	rtld_include_dirs += include_directories('sysdeps/lyre/include')
diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..e034881 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "libc: backtrace() is not implemented!\n" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git mlibc-workdir/sysdeps/nyaux/generic/entry.cpp mlibc-workdir/sysdeps/nyaux/generic/entry.cpp
new file mode 100644
index 0000000..d6e800c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/generic/entry.cpp
@@ -0,0 +1,41 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/elf/startup.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <bits/posix/posix_signal.h>
+
+
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+extern "C" void __dlapi_enter(uintptr_t *);
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+
+extern "C" void __mlibc_entry(uintptr_t *entry_stack, int (*main_fn)(int argc, char *argv[], char *env[])) {
+
+	__dlapi_enter(entry_stack);
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
diff --git mlibc-workdir/sysdeps/nyaux/generic/generic.cpp mlibc-workdir/sysdeps/nyaux/generic/generic.cpp
new file mode 100644
index 0000000..6822308
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/generic/generic.cpp
@@ -0,0 +1,428 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <stdlib.h>
+#include "syscall.h"
+
+
+
+#define STUB_ONLY {                             \
+	__ensure(!"STUB_ONLY function was called"); \
+	__builtin_unreachable();                    \
+}
+
+#ifndef MLIBC_BUILDING_RTLD
+
+namespace {
+
+int fcntl_helper(int fd, int request, int *result, ...) {
+	va_list args;
+	va_start(args, result);
+	if(!mlibc::sys_fcntl) {
+		return ENOSYS;
+	}
+	int ret = mlibc::sys_fcntl(fd, request, args, result);
+	va_end(args);
+	return ret;
+}
+
+}
+
+#endif
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) 
+{
+	__syscall(0, message);
+}
+
+void sys_libc_panic() {
+	sys_libc_log("\nMLIBC PANIC\n");
+	sys_exit(1);
+	__builtin_unreachable();
+}
+
+void sys_exit(int status) STUB_ONLY;
+
+#ifndef MLIBC_BUILDING_RTLD
+
+[[noreturn]] void sys_thread_exit() {
+	for (;;);
+	__builtin_unreachable();
+}
+
+extern "C" void __mlibc_thread_entry();
+
+int sys_clone(void *tcb, pid_t *pid_out, void *stack) STUB_ONLY;
+
+int sys_kill(pid_t pid, int signal) STUB_ONLY;
+
+int sys_tcgetattr(int fd, struct termios *attr) STUB_ONLY;
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) STUB_ONLY;
+
+#endif
+
+int sys_tcb_set(void *pointer) STUB_ONLY;
+
+#ifndef MLIBC_BUILDING_RTLD
+
+int sys_ppoll(struct pollfd *fds, int nfds, const struct timespec *timeout,
+		const sigset_t *sigmask, int *num_events) STUB_ONLY;
+
+int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+	struct timespec ts;
+	ts.tv_sec = timeout / 1000;
+	ts.tv_nsec = (timeout % 1000) * 1000000;
+	return sys_ppoll(fds, count, timeout < 0 ? NULL : &ts, NULL, num_events);
+}
+
+int sys_pselect(int nfds, fd_set *read_set, fd_set *write_set,
+		fd_set *except_set, const struct timespec *timeout,
+		const sigset_t *sigmask, int *num_events) {
+	struct pollfd *fds = (struct pollfd *)calloc(nfds, sizeof(struct pollfd));
+	if (fds == NULL) {
+		return ENOMEM;
+	}
+
+	for (int i = 0; i < nfds; i++) {
+		struct pollfd *fd = &fds[i];
+
+		if (read_set && FD_ISSET(i, read_set))
+			fd->events |= POLLIN; // TODO: Additional events.
+		if (write_set && FD_ISSET(i, write_set))
+			fd->events |= POLLOUT; // TODO: Additional events.
+		if (except_set && FD_ISSET(i, except_set))
+			fd->events |= POLLPRI;
+
+		if (!fd->events) {
+			fd->fd = -1;
+			continue;
+		}
+
+		fd->fd = i;
+	}
+
+	int e = sys_ppoll(fds, nfds, timeout, sigmask, num_events);
+
+	if (e != 0) {
+		free(fds);
+		return e;
+	}
+
+	fd_set res_read_set;
+	fd_set res_write_set;
+	fd_set res_except_set;
+	FD_ZERO(&res_read_set);
+	FD_ZERO(&res_write_set);
+	FD_ZERO(&res_except_set);
+
+	for (int i = 0; i < nfds; i++) {
+		struct pollfd *fd = &fds[i];
+
+		if (read_set && FD_ISSET(i, read_set)
+				&& fd->revents & (POLLIN | POLLERR | POLLHUP)) {
+			FD_SET(i, &res_read_set);
+		}
+
+		if (write_set && FD_ISSET(i, write_set)
+				&& fd->revents & (POLLOUT | POLLERR | POLLHUP)) {
+			FD_SET(i, &res_write_set);
+		}
+
+		if (except_set && FD_ISSET(i, except_set)
+				&& fd->revents & POLLPRI) {
+			FD_SET(i, &res_except_set);
+		}
+	}
+
+	free(fds);
+
+	if (read_set)
+		*read_set = res_read_set;
+	if (write_set)
+		*write_set = res_write_set;
+	if (except_set)
+		*except_set = res_except_set;
+
+	return 0;
+}
+
+#endif
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) STUB_ONLY;
+
+int sys_futex_wake(int *pointer) STUB_ONLY;
+
+#ifndef MLIBC_BUILDING_RTLD
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) STUB_ONLY;
+
+int sys_isatty(int fd) {
+	struct winsize ws;
+	int ret;
+
+	if (!sys_ioctl(fd, TIOCGWINSZ, &ws, &ret))
+		return 0;
+
+	return ENOTTY;
+}
+
+int sys_getcwd(char *buffer, size_t size) STUB_ONLY;
+#endif
+
+int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) STUB_ONLY;
+
+int sys_open(const char *path, int flags, mode_t mode, int *fd) {
+	return sys_openat(AT_FDCWD, path, flags, mode, fd);
+}
+
+#ifndef MLIBC_BUILDING_RTLD
+
+int sys_open_dir(const char *path, int *handle) {
+	return sys_open(path, O_DIRECTORY, 0, handle);
+}
+
+int sys_read_entries(int fd, void *buffer, size_t max_size, size_t *bytes_read) STUB_ONLY;
+
+#endif
+
+int sys_close(int fd) STUB_ONLY;
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) STUB_ONLY;
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) STUB_ONLY;
+
+#ifndef MLIBC_BUILDING_RTLD
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) STUB_ONLY;
+
+int sys_readlink(const char *path, void *data, size_t max_size, ssize_t *length) STUB_ONLY;
+
+int sys_link(const char *old_path, const char *new_path) {
+	return sys_linkat(AT_FDCWD, old_path, AT_FDCWD, new_path, 0);
+}
+
+int sys_linkat(int olddirfd, const char *old_path, int newdirfd, const char *new_path, int flags) STUB_ONLY;
+
+int sys_unlinkat(int fd, const char *path, int flags) STUB_ONLY;
+int sys_fchmod(int fd, mode_t mode) STUB_ONLY;
+
+int sys_rmdir(const char *path) STUB_ONLY
+
+#endif
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags,
+			   int fd, off_t offset, void **window) STUB_ONLY;
+int sys_vm_unmap(void *pointer, size_t size) STUB_ONLY;
+#ifndef MLIBC_BUILDING_RTLD
+
+int sys_vm_protect(void *pointer, size_t size, int prot) STUB_ONLY;
+#endif
+
+int sys_anon_allocate(size_t size, void **pointer) {
+	return sys_vm_map(NULL, size, PROT_EXEC | PROT_READ | PROT_WRITE,
+					  MAP_ANONYMOUS, -1, 0, pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+	(void)pointer; (void)size;
+	return 0;
+}
+
+#ifndef MLIBC_BUILDING_RTLD
+
+pid_t sys_getpid() STUB_ONLY;
+
+pid_t sys_getppid() STUB_ONLY;
+
+uid_t sys_getuid() {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+uid_t sys_geteuid() {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+gid_t sys_getgid() {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_setgid(gid_t gid) {
+	(void)gid;
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+	(void)pid;
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	*pgid = 0;
+	return 0;
+}
+
+gid_t sys_getegid() {
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_setpgid(pid_t pid, pid_t pgid) {
+	(void)pid; (void)pgid;
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_ttyname(int fd, char *buf, size_t size) {
+	(void)fd; (void)buf; (void)size;
+	mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return ENOSYS;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) STUB_ONLY;
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) STUB_ONLY;
+
+int sys_faccessat(int dirfd, const char *pathname, int mode, int flags) STUB_ONLY;
+
+int sys_access(const char *path, int mode) {
+	return sys_faccessat(AT_FDCWD, path, mode, 0);
+}
+
+int sys_pipe(int *fds, int flags) STUB_ONLY;
+
+int sys_chdir(const char *path) STUB_ONLY;
+int sys_mkdir(const char *path, mode_t mode) {
+	return sys_mkdirat(AT_FDCWD, path, mode);
+}
+
+int sys_mkdirat(int dirfd, const char *path, mode_t mode) STUB_ONLY;
+
+int sys_socket(int domain, int type_and_flags, int proto, int *fd) STUB_ONLY;
+
+int sys_socketpair(int domain, int type_and_flags, int proto, int *fds) STUB_ONLY;
+
+int sys_bind(int fd, const struct sockaddr *addr_ptr, socklen_t addr_length) STUB_ONLY;
+int sys_connect(int fd, const struct sockaddr *addr_ptr, socklen_t addr_length) STUB_ONLY;
+
+int sys_accept(int fd, int *newfd, struct sockaddr *addr_ptr, socklen_t *addr_length, int flags) STUB_ONLY;
+
+int sys_getsockopt(int fd, int layer, int number,
+		void *__restrict buffer, socklen_t *__restrict size) {
+	(void)fd; (void)size;
+	if(layer == SOL_SOCKET && number == SO_PEERCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_PEERCRED is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 4096;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_TYPE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_TYPE is unimplemented, hardcoding SOCK_STREAM\e[39m" << frg::endlog;
+		*(int *)buffer = SOCK_STREAM;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_ERROR) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_ERROR is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	}else{
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected getsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+
+	return 0;
+}
+
+
+int sys_setsockopt(int fd, int layer, int number,
+		const void *buffer, socklen_t size) {
+	(void)fd; (void)buffer; (void)size;
+	if(layer == SOL_SOCKET && number == SO_PASSCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_PASSCRED) is not implemented"
+				" correctly\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_ATTACH_FILTER) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_ATTACH_FILTER) is not implemented"
+				" correctly\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_RCVBUFFORCE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_RCVBUFFORCE) is not implemented"
+				" correctly\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == SOL_SOCKET && number == SO_REUSEADDR) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_REUSEADDR is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	}else if(layer == AF_NETLINK && number == SO_ACCEPTCONN) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with AF_NETLINK and SO_ACCEPTCONN is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	}else{
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected setsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+}
+
+int sys_msg_recv(int sockfd, struct msghdr *hdr, int flags, ssize_t *length) STUB_ONLY;
+
+int sys_peername(int fd, struct sockaddr *addr_ptr, socklen_t max_addr_length, socklen_t *actual_length) STUB_ONLY;
+
+int sys_listen(int fd, int backlog) STUB_ONLY;
+
+int sys_inotify_create(int flags, int *fd) STUB_ONLY;
+int sys_fork(pid_t *child) STUB_ONLY;
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) STUB_ONLY;
+int sys_fcntl(int fd, int request, va_list args, int *result) STUB_ONLY;
+int sys_dup(int fd, int flags, int *newfd) STUB_ONLY;
+
+int sys_dup2(int fd, int flags, int newfd) STUB_ONLY;
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) STUB_ONLY;
+
+int sys_sigaction(int signum, const struct sigaction *act, struct sigaction *oldact) STUB_ONLY;
+
+int sys_signalfd_create(sigset_t mask, int flags, int *fd) STUB_ONLY;
+
+int sys_waitpid(pid_t pid, int *status, int flags, struct rusage *ru, pid_t *ret_pid) STUB_ONLY;
+
+int sys_getgroups(size_t size, const gid_t *list, int *_ret) STUB_ONLY;
+
+int sys_mount(const char *source, const char *target, const char *fstype, unsigned long flags, const void *data) STUB_ONLY;
+int sys_umount2(const char *target, int flags) STUB_ONLY;
+
+int sys_gethostname(char *buffer, size_t bufsize) STUB_ONLY;
+
+int sys_sethostname(const char *buffer, size_t bufsize) STUB_ONLY;
+
+int sys_sleep(time_t *secs, long *nanos) STUB_ONLY;
+
+int sys_getitimer(int, struct itimerval *) {
+	mlibc::infoLogger() << "mlibc: sys_getitimer() is unimplemented" << frg::endlog;
+	return ENOSYS;
+}
+
+int sys_setitimer(int, const struct itimerval *, struct itimerval *) {
+	mlibc::infoLogger() << "mlibc: sys_setitimer() is unimplemented" << frg::endlog;
+	return ENOSYS;
+}
+
+#endif
+
+} // namespace mlibc
diff --git mlibc-workdir/sysdeps/nyaux/generic/syscall.h mlibc-workdir/sysdeps/nyaux/generic/syscall.h
new file mode 100644
index 0000000..f421220
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/generic/syscall.h
@@ -0,0 +1,16 @@
+#include <stdint.h>
+
+struct __syscall_ret {
+	uint64_t ret;
+	uint64_t errno;
+};
+
+__attribute__((naked))
+static __syscall_ret __syscall(int number, ...) {
+	asm (
+		"mov %rcx, %r10\n\t"
+		"syscall\n\t"
+		"ret"
+	);
+	(void)number;
+}
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/access.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/access.h
new file mode 120000
index 0000000..cb83931
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/linux/access.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/auxv.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/auxv.h
new file mode 120000
index 0000000..c43f878
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/linux/auxv.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/blkcnt_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..0b0ec27
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/blksize_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..7dc8d7c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blksize_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/clockid_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/clockid_t.h
new file mode 120000
index 0000000..6a42da5
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/clockid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/dev_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..bca881e
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/dev_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/epoll.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/epoll.h
new file mode 120000
index 0000000..eb4b76d
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+../../../../abis/linux/epoll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/errno.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/errno.h
new file mode 120000
index 0000000..6e507de
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/linux/errno.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/fcntl.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..463e2c9
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/linux/fcntl.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsblkcnt_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 0000000..898dfb2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsfilcnt_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 0000000..791755c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/gid_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..abce6d6
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/gid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/in.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/in.h
new file mode 120000
index 0000000..418d1d5
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/linux/in.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/ino_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..4c20aca
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/ino_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/inotify.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/inotify.h
new file mode 120000
index 0000000..b5cb282
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+../../../../abis/linux/inotify.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/ioctls.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/ioctls.h
new file mode 120000
index 0000000..595106b
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+../../../../abis/linux/ioctls.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/limits.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/limits.h
new file mode 120000
index 0000000..6c88db2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/linux/limits.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/mode_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..5d78fdf
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/mode_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/mqueue.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/mqueue.h
new file mode 120000
index 0000000..fa87b07
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+../../../../abis/linux/mqueue.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/msg.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/msg.h
new file mode 120000
index 0000000..f402b49
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/msg.h
@@ -0,0 +1 @@
+../../../../abis/linux/msg.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/nlink_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..bb3b625
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/nlink_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/packet.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/packet.h
new file mode 120000
index 0000000..998ef1a
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/packet.h
@@ -0,0 +1 @@
+../../../../abis/linux/packet.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/pid_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..baa90f6
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/pid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/poll.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/poll.h
new file mode 120000
index 0000000..8ea6a0a
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/poll.h
@@ -0,0 +1 @@
+../../../../abis/linux/poll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/ptrace.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/ptrace.h
new file mode 120000
index 0000000..b2517b2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+../../../../abis/linux/ptrace.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/reboot.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/reboot.h
new file mode 120000
index 0000000..77013a4
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/reboot.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/resource.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/resource.h
new file mode 120000
index 0000000..88d7402
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/linux/resource.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/seek-whence.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..df7bccf
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/linux/seek-whence.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/shm.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/shm.h
new file mode 120000
index 0000000..067d8c4
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/shm.h
@@ -0,0 +1 @@
+../../../../abis/linux/shm.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/signal.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/signal.h
new file mode 120000
index 0000000..709546b
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/vinix/signal.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/socket.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/socket.h
new file mode 120000
index 0000000..f1dc016
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/linux/socket.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/socklen_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/socklen_t.h
new file mode 120000
index 0000000..41f3b11
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/socklen_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/stat.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/stat.h
new file mode 120000
index 0000000..1f63b41
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/linux/stat.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/statfs.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/statfs.h
new file mode 120000
index 0000000..e3d202f
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/statvfs.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/statvfs.h
new file mode 120000
index 0000000..d0bdd40
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+../../../../abis/lyre/statvfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/statx.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/statx.h
new file mode 120000
index 0000000..8702a1d
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/statx.h
@@ -0,0 +1 @@
+../../../../abis/linux/statx.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/suseconds_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/suseconds_t.h
new file mode 120000
index 0000000..9ed6597
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/suseconds_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/termios.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/termios.h
new file mode 120000
index 0000000..ee8f0b0
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/linux/termios.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/time.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/time.h
new file mode 120000
index 0000000..2a02625
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/linux/time.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/uid_t.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..b306777
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/uid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/utsname.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/utsname.h
new file mode 120000
index 0000000..b285754
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/linux/utsname.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/vm-flags.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..bbe258c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/linux/vm-flags.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/wait.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/wait.h
new file mode 120000
index 0000000..feb2840
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/linux/wait.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/include/abi-bits/xattr.h mlibc-workdir/sysdeps/nyaux/include/abi-bits/xattr.h
new file mode 120000
index 0000000..66412d7
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+../../../../abis/linux/xattr.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyaux/meson.build mlibc-workdir/sysdeps/nyaux/meson.build
new file mode 100644
index 0000000..137c039
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/meson.build
@@ -0,0 +1,98 @@
+
+rtld_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/reboot.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/statx.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		'include/abi-bits/ptrace.h',
+		'include/abi-bits/poll.h',
+		'include/abi-bits/epoll.h',
+		'include/abi-bits/packet.h',
+		'include/abi-bits/inotify.h',
+		'include/abi-bits/clockid_t.h',
+		'include/abi-bits/shm.h',
+		'include/abi-bits/mqueue.h',
+		'include/abi-bits/suseconds_t.h',
+		'include/abi-bits/fsfilcnt_t.h',
+		'include/abi-bits/fsblkcnt_t.h',
+		'include/abi-bits/socklen_t.h',
+		'include/abi-bits/statfs.h',
+		'include/abi-bits/statvfs.h',
+		'include/abi-bits/ioctls.h',
+		'include/abi-bits/xattr.h',
+		'include/abi-bits/msg.h',
+		subdir: 'abi-bits',
+		follow_symlinks: true
+	)
+
+	
+
+	
+
+	
+
+	
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+
+	custom_target('crti',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crti.S',
+		output: 'crti.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+
+	custom_target('crtn',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crtn.S',
+		output: 'crtn.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
diff --git mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crt0.S mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crt0.S
new file mode 100644
index 0000000..d0e8213
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crt0.S
@@ -0,0 +1,8 @@
+.section .text
+.global _start
+_start:
+	mov %rsp, %rdi
+	lea main(%rip), %rsi
+	call __mlibc_entry
+.section .note.GNU-stack,"",%progbits
+
diff --git mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crti.S mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crti.S
new file mode 100644
index 0000000..911b078
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crti.S
@@ -0,0 +1,11 @@
+.section .init
+.global _init
+_init:
+	push %rax
+
+.section .fini
+.global _fini
+_fini:
+	push %rax
+.section .note.GNU-stack,"",%progbits
+
diff --git mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crtn.S mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crtn.S
new file mode 100644
index 0000000..9813a26
--- /dev/null
+++ mlibc-workdir/sysdeps/nyaux/x86_64/crt-src/crtn.S
@@ -0,0 +1,8 @@
+.section .init
+	pop %rax
+	ret
+
+.section .fini
+	pop %rax
+	ret
+.section .note.GNU-stack,"",%progbits
\ No newline at end of file
